{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./user-auth.service\";\nexport let UserService = /*#__PURE__*/(() => {\n  class UserService {\n    constructor(httpclient, userAuthService) {\n      this.httpclient = httpclient;\n      this.userAuthService = userAuthService;\n      this.PATH_OF_API = 'http://localhost:8080/authenticate';\n    }\n    // Méthode pour la connexion des utilisateurs\n    login(loginData) {\n      return this.httpclient.post(this.PATH_OF_API, loginData).pipe(tap(response => {\n        if (response && response.jwtToken) {\n          this.userAuthService.setToken(response.jwtToken); // Stocke le token JWT\n          this.userAuthService.setRoles(response.roles); // Stocke les rôles de l'utilisateur\n        } else {\n          console.warn('No JWT Token received');\n        }\n      }), catchError(error => {\n        console.error('Login error:', error);\n        return throwError(() => new Error('Login failed'));\n      }));\n    }\n    // Méthode pour obtenir les en-têtes avec JWT\n    getHeaders() {\n      const token = this.userAuthService.getToken();\n      return new HttpHeaders({\n        'Authorization': `Bearer ${token}`\n      });\n    }\n    // Méthodes pour accéder aux différentes ressources\n    forAdmin() {\n      const headers = this.getHeaders();\n      return this.httpclient.get(this.PATH_OF_API + '/forAdmin', {\n        headers: headers,\n        responseType: 'text'\n      }).pipe(catchError(error => {\n        console.error('Error fetching admin resource:', error);\n        return throwError(() => new Error('Failed to fetch admin resource'));\n      }));\n    }\n    forManager() {\n      const headers = this.getHeaders();\n      return this.httpclient.get(this.PATH_OF_API + '/forManager', {\n        headers: headers,\n        responseType: 'text'\n      }).pipe(catchError(error => {\n        console.error('Error fetching manager resource:', error);\n        return throwError(() => new Error('Failed to fetch manager resource'));\n      }));\n    }\n    forUser() {\n      const headers = this.getHeaders();\n      return this.httpclient.get(this.PATH_OF_API + '/forUser', {\n        headers: headers,\n        responseType: 'text'\n      }).pipe(catchError(error => {\n        console.error('Error fetching user resource:', error);\n        return throwError(() => new Error('Failed to fetch user resource'));\n      }));\n    }\n    forModerant() {\n      const headers = this.getHeaders();\n      return this.httpclient.get(this.PATH_OF_API + '/forModerant', {\n        headers: headers,\n        responseType: 'text'\n      }).pipe(catchError(error => {\n        console.error('Error fetching moderant resource:', error);\n        return throwError(() => new Error('Failed to fetch moderant resource'));\n      }));\n    }\n    // Méthode pour vérifier si les rôles de l'utilisateur correspondent aux rôles autorisés\n    roleMatch(allowedRoles) {\n      const userRoles = this.userAuthService.getRoles();\n      if (userRoles) {\n        return userRoles.some(role => allowedRoles.includes(role.roleName));\n      }\n      return false;\n    }\n    static #_ = this.ɵfac = function UserService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || UserService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.UserAuthService));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: UserService,\n      factory: UserService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return UserService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}